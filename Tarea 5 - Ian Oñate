{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "1755130b-b360-4067-9ff1-a86fdc0d06fa",
   "metadata": {},
   "source": [
    "# Escuela Politécnica nacional\n",
    "## Tarea N°5\n",
    "## Erick Carcelén"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b50441df-4a3e-4f0b-a6e2-b3c3c7aef34a",
   "metadata": {},
   "source": [
    "#### 1. Sea $f(x)=-x^3-cosx\\ \\ y\\ \\ p_0=-1$. Utilice el método de Newton y de la Secante para encontrar $p_2$. ¿Se podría usar $p_0=0$?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "3f0ec078-1b7d-481e-8d53-89dfff5dd707",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "\n",
    "def newton_method(f, df, p0, tol=1e-6, max_iter=100):\n",
    "    for i in range(max_iter):\n",
    "        p = p0 - f(p0)/df(p0)\n",
    "        if abs(p - p0) < tol:\n",
    "            return p, i + 1\n",
    "        p0 = p\n",
    "    return p, max_iter"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "02c0423c-f190-4ad1-831e-298b5888a71d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Método de Newton: p2 = -0.8654740331016162, iteraciones = 4\n"
     ]
    }
   ],
   "source": [
    "f1 = lambda x: -x**3 - np.cos(x)\n",
    "df1 = lambda x: -3*x**2 + np.sin(x)\n",
    "\n",
    "p0_newton = -1\n",
    "p2_newton, iterations_newton = newton_method(f1, df1, p0_newton)\n",
    "print(f\"Método de Newton: p2 = {p2_newton}, iteraciones = {iterations_newton}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "81af9de5-27cb-4fa8-a2aa-35e45aa58df3",
   "metadata": {},
   "outputs": [],
   "source": [
    "def secant_method(f, p0, p1, tol=1e-6, max_iter=100):\n",
    "    for i in range(max_iter):\n",
    "        q0, q1 = f(p0), f(p1)\n",
    "        p = p1 - q1 * (p1 - p0) / (q1 - q0)\n",
    "        if abs(p - p1) < tol:\n",
    "            return p, i + 1\n",
    "        p0, p1 = p1, p\n",
    "    return p, max_iter"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "58a013d1-3465-469a-81da-27cbdc14037a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Método de la secenate: p2 = -0.8654740330997166, iteraciones = 6\n"
     ]
    }
   ],
   "source": [
    "p0_secant, p1_secant = -1, -0.5\n",
    "p2_secant, iterations_secant = secant_method(f1, p0_secant, p1_secant)\n",
    "print(f\"Método de la secenate: p2 = {p2_secant}, iteraciones = {iterations_secant}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "a5d7383a-8d24-4d18-88ad-54097c9dc10d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "f(0) = -1.0\n",
      "f'(0) = 0.0\n",
      "Métodod de Newton: p2 = nan, iteraciones = 100\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Erick\\AppData\\Local\\Temp\\ipykernel_7580\\2482269434.py:5: RuntimeWarning: divide by zero encountered in scalar divide\n",
      "  p = p0 - f(p0)/df(p0)\n",
      "C:\\Users\\Erick\\AppData\\Local\\Temp\\ipykernel_7580\\1908360107.py:1: RuntimeWarning: invalid value encountered in cos\n",
      "  f1 = lambda x: -x**3 - np.cos(x)\n",
      "C:\\Users\\Erick\\AppData\\Local\\Temp\\ipykernel_7580\\1908360107.py:2: RuntimeWarning: invalid value encountered in sin\n",
      "  df1 = lambda x: -3*x**2 + np.sin(x)\n"
     ]
    }
   ],
   "source": [
    "# Evaluamos la función y su derivada en x = 0\n",
    "f_at_0 = f1(0)\n",
    "df_at_0 = df1(0)\n",
    "\n",
    "print(f\"f(0) = {f_at_0}\")\n",
    "print(f\"f'(0) = {df_at_0}\")\n",
    "\n",
    "# Intentamos aplicar el Método de Newton desde p0 = 0\n",
    "try:\n",
    "    p0_newton = 0\n",
    "    p2_newton, iterations_newton = newton_method(f1, df1, p0_newton)\n",
    "    print(f\"Métodod de Newton: p2 = {p2_newton}, iteraciones = {iterations_newton}\")\n",
    "except ZeroDivisionError:\n",
    "    print(\"No es posible ejecutar el método debido a una división por 0 en p0 = 0.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8aaca276-793e-4b27-856e-c0883a15dde1",
   "metadata": {},
   "source": [
    "El resultado obetnido confirma que no se puede usar $p_0=0$ en el método de Newton debido a la división por cero en la derivada"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "954ec36b-cfae-4d4b-9631-5dcc47c7d72f",
   "metadata": {},
   "source": [
    "#### 2. Encuentre soluciones precisas dentro de $10^{-4}$ para los siguientes problemas:"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "40eb14cf-6029-41fa-912b-1e4bde31afd2",
   "metadata": {},
   "source": [
    "a. $x^3-2x^2-5=0,\\  [1,4]$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "8f2d744e-9ee4-4490-b726-ee9e4e0d1b39",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Métodod de Newton (a): raíz = 2.6906474480286287, iteraciones = 22\n",
      "Método de la Secante (a): raíz = 2.690647447883773, iteraciones = 10\n"
     ]
    }
   ],
   "source": [
    "f2a = lambda x: x**3 - 2*x**2 - 5\n",
    "df2a = lambda x: 3*x**2 - 4*x\n",
    "\n",
    "p0_newton_a = 1\n",
    "root_newton_a, iterations_newton_a = newton_method(f2a, df2a, p0_newton_a, tol=1e-4)\n",
    "print(f\"Métodod de Newton (a): raíz = {root_newton_a}, iteraciones = {iterations_newton_a}\")\n",
    "\n",
    "p0_secant_a, p1_secant_a = 1, 4\n",
    "root_secant_a, iterations_secant_a = secant_method(f2a, p0_secant_a, p1_secant_a, tol=1e-4)\n",
    "print(f\"Método de la Secante (a): raíz = {root_secant_a}, iteraciones = {iterations_secant_a}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3e9b560f-1a1a-4430-a2e7-4013a7c1d79d",
   "metadata": {},
   "source": [
    "b. $\\ x^3+3x^2-1=0,\\  [-3,-2]$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "3f5f9bdb-24d0-404d-a3ad-c1e8375321cb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Método de Newton (b): raíz = -2.8793852448366706, iteraciones = 3\n",
      "Método de la Secante (b): raíz = -2.879385194736809, iteraciones = 6\n"
     ]
    }
   ],
   "source": [
    "f2b = lambda x: x**3 + 3*x**2 - 1\n",
    "df2b = lambda x: 3*x**2 + 6*x\n",
    "\n",
    "p0_newton_b = -3\n",
    "root_newton_b, iterations_newton_b = newton_method(f2b, df2b, p0_newton_b, tol=1e-4)\n",
    "print(f\"Método de Newton (b): raíz = {root_newton_b}, iteraciones = {iterations_newton_b}\")\n",
    "\n",
    "p0_secant_b, p1_secant_b = -3, -2\n",
    "root_secant_b, iterations_secant_b = secant_method(f2b, p0_secant_b, p1_secant_b, tol=1e-4)\n",
    "print(f\"Método de la Secante (b): raíz = {root_secant_b}, iteraciones = {iterations_secant_b}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "558eb031-df88-476a-a03f-9823abd924c4",
   "metadata": {},
   "source": [
    "c. $x-cosx=0,\\  [0,\\pi/2]$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "271ef645-4457-4d0d-908d-b95b0e795bfa",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Método de Newton (c): raíz = 0.739085133385284, iteraciones = 4\n",
      "Método de la Secante (c): raíz = 0.739085133034638, iteraciones = 5\n"
     ]
    }
   ],
   "source": [
    "f2c = lambda x: x - np.cos(x)\n",
    "df2c = lambda x: 1 + np.sin(x)\n",
    "\n",
    "p0_newton_c = 0\n",
    "root_newton_c, iterations_newton_c = newton_method(f2c, df2c, p0_newton_c, tol=1e-4)\n",
    "print(f\"Método de Newton (c): raíz = {root_newton_c}, iteraciones = {iterations_newton_c}\")\n",
    "\n",
    "p0_secant_c, p1_secant_c = 0, np.pi/2\n",
    "root_secant_c, iterations_secant_c = secant_method(f2c, p0_secant_c, p1_secant_c, tol=1e-4)\n",
    "print(f\"Método de la Secante (c): raíz = {root_secant_c}, iteraciones = {iterations_secant_c}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7f8dc902-d0fb-4c98-9057-434f2388d385",
   "metadata": {},
   "source": [
    "d. $x-0.8-0.2senx=0,\\  [0,\\pi/2]$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "720223c2-2afb-4b5b-bba3-e6b2f85eabf7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Método de Newton (d): raíz = 0.9643338876952227, iteraciones = 4\n",
      "Método de la Secante (d): raíz = 0.964333884548886, iteraciones = 4\n"
     ]
    }
   ],
   "source": [
    "f2d = lambda x: x - 0.8 - 0.2 * np.sin(x)\n",
    "df2d = lambda x: 1 - 0.2 * np.cos(x)\n",
    "\n",
    "p0_newton_d = 0\n",
    "root_newton_d, iterations_newton_d = newton_method(f2d, df2d, p0_newton_d, tol=1e-4)\n",
    "print(f\"Método de Newton (d): raíz = {root_newton_d}, iteraciones = {iterations_newton_d}\")\n",
    "\n",
    "p0_secant_d, p1_secant_d = 0, np.pi/2\n",
    "root_secant_d, iterations_secant_d = secant_method(f2d, p0_secant_d, p1_secant_d, tol=1e-4)\n",
    "print(f\"Método de la Secante (d): raíz = {root_secant_d}, iteraciones = {iterations_secant_d}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "55e5be3b-ae0d-4b57-97ec-8b55471cf7a9",
   "metadata": {},
   "source": [
    "#### 3. Use los 2 métodos en esta sección para encontrar las soluciones dentro de $10^{-5}$ para los siguientes problemas:"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "653e47cd-c212-4aca-9603-bf7ef3da2843",
   "metadata": {},
   "source": [
    "a. $3x-e^{x}=0\\  $ para $\\  1\\leq x\\leq2$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "1b07474a-fdab-43f2-a288-aba11a34fca4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Método de Newton (3a): raíz = 0.6190612867359452, iteraciones = 6\n",
      "Método de la Secante (3a): raíz = 1.5121345517620621, iteraciones = 9\n"
     ]
    }
   ],
   "source": [
    "f3a = lambda x: 3*x - np.exp(x)\n",
    "df3a = lambda x: 3 - np.exp(x)\n",
    "\n",
    "p0_newton_3a = 1\n",
    "root_newton_3a, iterations_newton_3a = newton_method(f3a, df3a, p0_newton_3a, tol=1e-5)\n",
    "print(f\"Método de Newton (3a): raíz = {root_newton_3a}, iteraciones = {iterations_newton_3a}\")\n",
    "\n",
    "p0_secant_3a, p1_secant_3a = 1, 2\n",
    "root_secant_3a, iterations_secant_3a = secant_method(f3a, p0_secant_3a, p1_secant_3a, tol=1e-5)\n",
    "print(f\"Método de la Secante (3a): raíz = {root_secant_3a}, iteraciones = {iterations_secant_3a}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a0185a8b-51db-4ebe-8ac1-6121a4a86ab9",
   "metadata": {},
   "source": [
    "b. $2+3cosx-e^{x}=0\\  $ para $\\  1\\leq x \\leq 2$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "055433e3-09ae-46b2-bcdf-23a40cfae2b9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Método de Newton (3b): raíz = 1.2397146979752596, iteraciones = 4\n",
      "Método de la Secante (3b): raíz = 1.2397146979752531, iteraciones = 6\n"
     ]
    }
   ],
   "source": [
    "f3b = lambda x: 2*x + 3*np.cos(x) - np.exp(x)\n",
    "df3b = lambda x: 2 - 3*np.sin(x) - np.exp(x)\n",
    "\n",
    "p0_newton_3b = 1\n",
    "root_newton_3b, iterations_newton_3b = newton_method(f3b, df3b, p0_newton_3b, tol=1e-5)\n",
    "print(f\"Método de Newton (3b): raíz = {root_newton_3b}, iteraciones = {iterations_newton_3b}\")\n",
    "\n",
    "p0_secant_3b, p1_secant_3b = 1, 2\n",
    "root_secant_3b, iterations_secant_3b = secant_method(f3b, p0_secant_3b, p1_secant_3b, tol=1e-5)\n",
    "print(f\"Método de la Secante (3b): raíz = {root_secant_3b}, iteraciones = {iterations_secant_3b}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ad6f1025-3da7-496d-a321-732139d2c7b4",
   "metadata": {},
   "source": [
    "#### 4. El polinomio de cuarto grado: $$f(x) = 230x^4 + 18x^3 + 9x^2 - 221x - 9$$ tiene dos ceros reales, uno en $\\  [1,0]\\  $ y el otro en $\\  [0, ]\\ $. Intente aproximar estos ceros dentro de $10^{-6}\\ $ con:\n",
    "#### a. El método de la Secante (use los extremos como las estimaciones iniciales)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "3f1cd6ab-fb90-411b-9108-2e0c47eb2da5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Método de la Secante (4a): raíz = -0.040659288315725135, iteraciones = 4\n",
      "Método de la Secante (4b): raíz = -0.04065928831557162, iteraciones = 11\n"
     ]
    }
   ],
   "source": [
    "f4 = lambda x: 230*x**4 + 18*x**3 + 9*x**2 - 221*x - 9\n",
    "\n",
    "p0_secant_4a, p1_secant_4a = -1, 0\n",
    "root_secant_4a, iterations_secant_4a = secant_method(f4, p0_secant_4a, p1_secant_4a, tol=1e-6)\n",
    "print(f\"Método de la Secante (4a): raíz = {root_secant_4a}, iteraciones = {iterations_secant_4a}\")\n",
    "\n",
    "p0_secant_4b, p1_secant_4b = 0, 1\n",
    "root_secant_4b, iterations_secant_4b = secant_method(f4, p0_secant_4b, p1_secant_4b, tol=1e-6)\n",
    "print(f\"Método de la Secante (4b): raíz = {root_secant_4b}, iteraciones = {iterations_secant_4b}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cf3c9628-ede0-4daf-b4ab-25938ffaca44",
   "metadata": {},
   "source": [
    "#### b. El método de Newton (use el punto medio como estimación inicial)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "ab1d6bb1-1ff0-48ee-8e40-3026dfd65800",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Método de Newton (4a): raíz = -0.04065928831575899, iteraciones = 4\n",
      "Método de Newton (4b): raíz = -0.040659288315758865, iteraciones = 6\n"
     ]
    }
   ],
   "source": [
    "df4 = lambda x: 920*x**3 + 54*x**2 + 18*x - 221\n",
    "\n",
    "p0_newton_4a = -0.5\n",
    "root_newton_4a, iterations_newton_4a = newton_method(f4, df4, p0_newton_4a, tol=1e-6)\n",
    "print(f\"Método de Newton (4a): raíz = {root_newton_4a}, iteraciones = {iterations_newton_4a}\")\n",
    "\n",
    "p0_newton_4b = 0.5\n",
    "root_newton_4b, iterations_newton_4b = newton_method(f4, df4, p0_newton_4b, tol=1e-6)\n",
    "print(f\"Método de Newton (4b): raíz = {root_newton_4b}, iteraciones = {iterations_newton_4b}\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "84f7953f-eba8-4d5c-84b1-70be818ba9d3",
   "metadata": {},
   "source": [
    "#### 5. La función $\\ f(x)=tan\\pi x-6$ tiene cero en $(1/\\pi)\\ $arcotangente $6 \\approx 0.447431543$. Sea $p_0=0\\  y\\  p_1=0.48\\ $ y use 10 iteraciones en cada uno de los siguientes métodos para aproximar esta raíz. ¿Cuál método es más eficaz y por qué?\n",
    "#### a. Método de Bisección"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "647cbdda-ac20-463a-9275-1cdfba7a9c4a",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "\n",
    "# Función f(x)\n",
    "f5 = lambda x: np.tan(np.pi * x) - 6\n",
    "\n",
    "# Derivada f'(x)\n",
    "df5 = lambda x: np.pi / (np.cos(np.pi * x))**2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "1fe64175-6641-4d50-96bc-5f911ae53344",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Método de la bisección: raíz = 0.44765625, iteraciones = 10\n"
     ]
    }
   ],
   "source": [
    "def bisection_method(f, a, b, tol=1e-6, max_iter=10):\n",
    "    if f(a) * f(b) > 0:\n",
    "        raise ValueError(\"f(a) and f(b) must have opposite signs\")\n",
    "    for i in range(max_iter):\n",
    "        c = (a + b) / 2\n",
    "        if abs(f(c)) < tol or (b - a) / 2 < tol:\n",
    "            return c, i + 1\n",
    "        if f(c) * f(a) > 0:\n",
    "            a = c\n",
    "        else:\n",
    "            b = c\n",
    "    return c, max_iter\n",
    "\n",
    "a, b = 0, 0.48\n",
    "root_bisection, iterations_bisection = bisection_method(f5, a, b, tol=1e-6, max_iter=10)\n",
    "print(f\"Método de la bisección: raíz = {root_bisection}, iteraciones = {iterations_bisection}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a1e92f58-2e15-4278-b347-fc2d5db960ce",
   "metadata": {},
   "source": [
    "#### b. Método de Newton"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "5cc2cc6a-8879-4496-ae68-24b5909c0b6c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Método de Newton: raíz = 13.655012218663435, iteraciones = 10\n"
     ]
    }
   ],
   "source": [
    "p0_newton_5 = 0\n",
    "root_newton, iterations_newton = newton_method(f5, df5, p0_newton_5, tol=1e-6, max_iter=10)\n",
    "print(f\"Método de Newton: raíz = {root_newton}, iteraciones = {iterations_newton}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "96107957-9b1c-4795-9709-e84298c519c8",
   "metadata": {},
   "source": [
    "#### c. Método de la Secante"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "fe033bdd-2745-4dc6-8b7b-cf09c51521f5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Método de la Secante: raíz = -2989.9400375314453, iteracions = 10\n"
     ]
    }
   ],
   "source": [
    "p0_secant_5, p1_secant_5 = 0, 0.48\n",
    "root_secant_5, iterations_secant_5 = secant_method(f5, p0_secant_5, p1_secant_5, tol=1e-6, max_iter=10)\n",
    "print(f\"Método de la Secante: raíz = {root_secant_5}, iteracions = {iterations_secant_5}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c8226397-f9c3-4ed5-83c0-df84a321b9e0",
   "metadata": {},
   "source": [
    "El método de la bisección ha encontrado una raíz cercana a 0.44765625 después de 10 iteraciones, lo cual es bastante preciso considerando la raíz verdadera aproximada 0.447431543.\n",
    "\n",
    "El método de Newton parece diverger, resultando en una raíz no razonable 13.655012218663435. Esto puede suceder si el punto inicial está demasiado lejos de la raíz o si la derivada en algún punto es muy grande o cero.\n",
    "\n",
    "El método de la secante también parece diverger, resultando en una raíz no razonable −2989.9400375314453. Esto puede suceder si las iteraciones iniciales están lejos de la raíz y la función cambia rápidamente."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cdc54275-17e1-48fd-a1ce-e77a7718dfe9",
   "metadata": {},
   "source": [
    "#### 6. La función descrita por $\\  f(x)=ln(x^2+1)-e^{0.4x}cos\\pi x\\  $ tiene un número infinito de ceros.\n",
    "#### a. Determine, dentro de $\\ 10^{-6},\\ $ el único cero negativo."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a40eb261-8725-4486-b74a-f333295f9e04",
   "metadata": {},
   "source": [
    "#### b. Determinar, dentro de $\\ 10^{-6},\\ $ los cuatro ceros positivos más pequeños"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b8e7d6ef-9316-4d0a-a0c6-aaedb142f141",
   "metadata": {},
   "source": [
    "#### c. Determinar una aproximación inicial razonable para encontrar el enésimo cero positivo más pequeño de $f$.\n",
    "#### \\[Sugerencia: Dibuje una gráfica aproximada de $f$.] "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2408458a-aac1-445d-a84c-92b7fbab21e0",
   "metadata": {},
   "source": [
    "#### d. Use la parte c) para determinar, dentro de $10^{−6}$, el vigesimoquinto cero positivo más pequeño de $f$. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "608565b4-af98-4272-949e-f6ea57e29402",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.optimize import newton, bisect\n",
    "\n",
    "# Definimos la función y su derivada\n",
    "def f(x):\n",
    "    return np.log(x**2 + 1) - np.exp(0.4*x) * np.cos(np.pi * x)\n",
    "\n",
    "def df(x):\n",
    "    return (2*x / (x**2 + 1)) - 0.4*np.exp(0.4*x) * np.cos(np.pi * x) + np.pi*np.exp(0.4*x) * np.sin(np.pi * x)\n",
    "\n",
    "# Encontramos el único cero negativo\n",
    "cero_negativo = newton(f, -1, fprime=df, tol=1e-6)\n",
    "\n",
    "# Encontramos los cuatro ceros positivos más pequeños\n",
    "ceros_positivos = []\n",
    "for i in range(1, 5):\n",
    "    cero = newton(f, i, fprime=df, tol=1e-6)\n",
    "    ceros_positivos.append(cero)\n",
    "\n",
    "# Aproximación inicial para el enésimo cero positivo más pequeño\n",
    "def aproximacion_inicial(n):\n",
    "    return n\n",
    "\n",
    "# Vigesimoquinto cero positivo más pequeño\n",
    "vigesimoquinto_cero = newton(f, aproximacion_inicial(25), fprime=df, tol=1e-6)\n",
    "\n",
    "cero_negativo, ceros_positivos, vigesimoquinto_ceroimport matplotlib.pyplot as plt\n",
    "\n",
    "x = np.linspace(-10, 10, 1000)\n",
    "y = f6(x)\n",
    "\n",
    "plt.plot(x, y)\n",
    "plt.axhline(0, color='red', linestyle='--')\n",
    "plt.title(\"Gráfica de f(x)\")\n",
    "plt.xlabel(\"x\")\n",
    "plt.ylabel(\"f(x)\")\n",
    "plt.grid(True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "cfe10ae1-24d7-42b1-bf9d-55f4e9cc10c3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.4506567478899403,\n",
       " [-0.4341430472857333,\n",
       "  0.4506567478899357,\n",
       "  1.744738053368827,\n",
       "  2.2383197950741383],\n",
       " 22.49975528564899)"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.optimize import newton, bisect\n",
    "\n",
    "# Definimos la función y su derivada\n",
    "def f(x):\n",
    "    return np.log(x**2 + 1) - np.exp(0.4*x) * np.cos(np.pi * x)\n",
    "\n",
    "def df(x):\n",
    "    return (2*x / (x**2 + 1)) - 0.4*np.exp(0.4*x) * np.cos(np.pi * x) + np.pi*np.exp(0.4*x) * np.sin(np.pi * x)\n",
    "\n",
    "# Encontramos el único cero negativo\n",
    "cero_negativo = newton(f, -1, fprime=df, tol=1e-6)\n",
    "\n",
    "# Encontramos los cuatro ceros positivos más pequeños\n",
    "ceros_positivos = []\n",
    "for i in range(1, 5):\n",
    "    cero = newton(f, i, fprime=df, tol=1e-6)\n",
    "    ceros_positivos.append(cero)\n",
    "\n",
    "# Aproximación inicial para el enésimo cero positivo más pequeño\n",
    "def aproximacion_inicial(n):\n",
    "    return n\n",
    "\n",
    "# Vigesimoquinto cero positivo más pequeño\n",
    "vigesimoquinto_cero = newton(f, aproximacion_inicial(25), fprime=df, tol=1e-6)\n",
    "\n",
    "cero_negativo, ceros_positivos, vigesimoquinto_cero"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "51ebaf7b-a2ce-4cfa-8bf6-2915634a4036",
   "metadata": {},
   "source": [
    "#### 7. la función $\\ f(x)=x^{(1/3)}\\ $ tiene raíz en $x=0$. Usando el punto de inicio de $x=1\\ y\\ p_0=5,\\ p_1=0.5$ para el método de secante, compare los resultados de los métodos de la secante y de Newton."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "77dbc8fa-2ae4-4185-bb80-aa5449e9004a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Método de Newton (7): raíz = (5119.999999999987-1.2612400128951961e-11j), iteraciones = 10\n",
      "Método de la Secante (7): raíz = (1.2916757952824988e+16+7.467594290408362e+16j), iteraciones = 100\n"
     ]
    }
   ],
   "source": [
    "f7 = lambda x: x**(1/3)\n",
    "df7 = lambda x: (1/3) * x**(-2/3)\n",
    "\n",
    "p0_newton_7 = 5\n",
    "root_newton_7, iterations_newton_7 = newton_method(f7, df7, p0_newton_7, tol=1e-6)\n",
    "print(f\"Método de Newton (7): raíz = {root_newton_7}, iteraciones = {iterations_newton_7}\")\n",
    "\n",
    "p0_secant_7, p1_secant_7 = 5, 0.5\n",
    "root_secant_7, iterations_secant_7 = secant_method(f7, p0_secant_7, p1_secant_7, tol=1e-6)\n",
    "print(f\"Método de la Secante (7): raíz = {root_secant_7}, iteraciones = {iterations_secant_7}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9d51a4f0-b1bb-45fb-bba3-6ee11e72f395",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
